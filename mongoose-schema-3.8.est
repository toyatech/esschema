var mongoose = require('mongoose')
  , Schema = mongoose.Schema
  , ObjectId = Schema.Types.ObjectId
  , Mixed = Schema.Types.Mixed;

**
*var {{SchemaName}} = new Schema({
  *{{PathName}}: { 
    +type: [[ String | Number | Date | Buffer | Boolean | Mixed | ObjectId | Array ]], 
    default: Literal | Function,
    get: Function ( Value, SchemaType ),
    index: 
      Boolean 
      | String ( 'hashed' | '2dsphere'#'2D Sphere' | '2d'#'2D' | 'geoHaystack' | 'text' ) 
      | Number ( 1#ascending | -1#descending )
      | Object ( 
        type: String ( 'hashed' | '2dsphere'#'2D Sphere' | '2d'#'2D' | 'geoHaystack' | 'text' ),
        unique: Boolean, 
        expires: Number | String, 
        sparse: Boolean 
      ),
    required: Boolean | String,
    select: Boolean,
    set: Function ( val#Value, schemaType ),
    sparse: Boolean,
    unique: Boolean,
    validate: 
      RegExp
      | Array ( RegExp, String )
      | Function  
      | Array ( Function, String )  
      | Array ( Object ( RegExp, String ) )
      | Array ( Object ( Function, String ) ),
    ?type: { 
      String: { 
        enum: Array ( String ), 
        lowercase: Boolean, 
        match: RegExp | Array ( RegExp, String ),
        trim: Boolean,
        uppercase: Boolean
      },
      Number: {
        max: Number | Array ( Number, String ),
        min: Number | Array ( Number, String )
      },
      Date: {
        expires: Number | String
      },
      ObjectId: {
        auto: Boolean
      }
    }
  }
}, Object (
    autoIndex: Boolean,
    bufferCommands: Boolean,
    capped: Number | Object ( +size: Number, max: Number, autoIndexId: Boolean,
    collection: String,
    id: Boolean,
    _id: Boolean,
    read#readPreferences: 
      String ( 'primary'/'p' | 'primaryPreferred'/'pp' | 'secondary'/'s' | 'secondaryPreferred'/'sp' | 'nearest'/'n' )
      | Array ( String ( 'primary'/'p' | 'primaryPreferred'/'pp' | 'secondary'/'s' | 'secondaryPreferred'/'sp' | 'nearest'/'n' ), Object ),
    safe: Boolean | Object ( w#writeConcern: Number ( 1#acknowledgment | 0#doNotAcknowledge | >1#acknowledgmentFromReplicas ) | String ( 'majority'#acknowledgeFromMajority ) | Object, j#journaled: Boolean, wtimeout#timeout: Number ),
    shardKey: Object,
    strict: Boolean,
    toJSON: Object ( getters: Boolean, virtuals: Boolean, minimize: Boolean, transform: Function (doc#Document, ret#Object, options), depopulate: Boolean ),
    toObject: Object ( getters: Boolean, virtuals: Boolean, minimize: Boolean, transform: Function (doc#Document, ret#Object, options), depopulate: Boolean ),
    versionKey: String
  )
);

*{{SchemaName}}.virtual({{VirtualPropertyName}})( .set( Function ) , .get( Function ) );

*{{SchemaName}}.methods.{{MethodName}} = Function;

*{{SchemaName}}.statics.{{StaticName}} = Function;

*{{SchemaName}}.index( Object );

**
